# -*- coding: utf-8 -*-
"""binance trade anomaly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r86oiJoNdU1Dj9uXAd17LipAEmrBL5Va
"""

import requests
import numpy as np
from datetime import datetime

def fetch_historical_trades(symbol, limit=500):
    url = f'https://api.binance.com/api/v3/historicalTrades?symbol={symbol}&limit={limit}'
    headers = {
        'X-MBX-APIKEY': 'YOUR API KEY'
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error fetching data: {response.status_code}")
        return []

def detect_anomalies(symbol, limit=500):
    threshold = float(input("Enter the threshold multiplier for anomaly detection (e.g., 2.0): "))

    trades = fetch_historical_trades(symbol, limit)

    if not trades:
        return "No data to analyze"

    volumes = [float(trade['qty']) for trade in trades]

    mean_volume = np.mean(volumes)
    std_volume = np.std(volumes)

    print(f"Analyzing trade volumes for {symbol}...")
    print(f"Mean Volume: {mean_volume:.2f}, Standard Deviation: {std_volume:.2f}")

    anomalies = []
    for i, volume in enumerate(volumes):
        if volume > mean_volume + threshold * std_volume or volume < mean_volume - threshold * std_volume:
            timestamp = datetime.utcfromtimestamp(trades[i]['time'] / 1000)
            anomalies.append({
                'trade_id': trades[i]['id'],
                'timestamp': timestamp,
                'volume': volume
            })

    if anomalies:
        print(f"\nFound {len(anomalies)} anomalies:\n")
        for anomaly in anomalies:
            print(f"Trade ID: {anomaly['trade_id']}")
            print(f"Timestamp: {anomaly['timestamp']}")
            print(f"Volume: {anomaly['volume']}\n")
    else:
        print("\nNo anomalies detected.\n")

symbol = 'BTCUSDT'
detect_anomalies(symbol, limit=500)

